Creating a SparkSession
In this exercise, you'll spin up a local Spark cluster using all available cores. The cluster will be accessible via a 
SparkSession object.

The SparkSession class has a builder attribute, which is an instance of the Builder class. The Builder class 
exposes three important methods that let you:

specify the location of the master node;
name the application (optional); and
retrieve an existing SparkSession or, if there is none, create a new one.
The SparkSession class has a version attribute which gives the version of Spark.

Find out more about SparkSession here.

Once you are finished with the cluster, it's a good idea to shut it down, which will free up its resources, 
making them available for other processes.

Note:: You might find it useful to revise the slides from the lessons in the Slides panel next to the IPython Shell.


Import the SparkSession class from pyspark.sql.
Create a SparkSession object connected to a local cluster. Use all available cores. Name the application 'test'.
Retrieve the version of Spark running on the cluster.
Shut down the cluster.

# Import the PySpark module
from pyspark.sql import SparkSession 

# Create SparkSession object
spark = SparkSession.builder \
                    .master('local[*]') \
                    .appName('test') \
                    .getOrCreate()

# What version of Spark?
print(spark.version)

# Terminate the cluster
spark.stop()

----------------------------------------------------------------------------

Loading flights data
In this exercise you're going to load some airline flight data from a CSV file. To ensure that the exercise 
runs quickly these data have been trimmed down to only 50 000 records. You can get a larger dataset in the same format here.

Notes on CSV format:

fields are separated by a comma (this is the default separator) and
missing data are denoted by the string 'NA'.
Data dictionary:

mon — month (integer between 1 and 12)
dom — day of month (integer between 1 and 31)
dow — day of week (integer; 1 = Monday and 7 = Sunday)
org — origin airport (IATA code)
mile — distance (miles)
carrier — carrier (IATA code)
depart — departure time (decimal hour)
duration — expected duration (minutes)
delay — delay (minutes)
pyspark has been imported for you and the session has been initialized.

Note: The data have been aggressively down-sampled.

Read data from a CSV file called 'flights.csv'. Assign data types to columns automatically. Deal with missing data.
How many records are in the data?
Take a look at the first five records.
What data types have been assigned to the columns? Do these look correct?

# Read data from CSV file
flights = spark.read.csv('flights.csv',
                         sep=',',
                         header=True,
                         inferSchema=True,
                         nullValue= 'NA')

# Get number of records
print("The data contain %d records." % flights.count())

# View the first five records
flights.show(5)

# Check column data types
flights.dtypes
-----------------------------------------------------------------------------------------------------------
Loading SMS spam data
You've seen that it's possible to infer data types directly from the data. Sometimes it's convenient to have 
direct control over the column types. You do this by defining an explicit schema.

The file sms.csv contains a selection of SMS messages which have been classified as either 'spam' or 'ham'. 
These data have been adapted from the UCI Machine Learning Repository. There are a total of 5574 SMS, of which 
747 have been labelled as spam.

Notes on CSV format:

no header record and
fields are separated by a semicolon (this is not the default separator).
Data dictionary:

id — record identifier
text — content of SMS message
label — spam or ham (integer; 0 = ham and 1 = spam)

Specify the data schema, giving columns names ('id', 'text' and 'label') and column types.
Read data from a delimited file called 'sms.csv'.
Print the schema for the resulting DataFrame.


from pyspark.sql.types import StructType, StructField, IntegerType, StringType

# Specify column names and types
schema = StructType([
    StructField("id", IntegerType()),
    StructField("text", StringType()),
    StructField("label", IntegerType())
])

# Load data from a delimited file
sms = spark.read.csv("sms.csv", sep=';', header=False, schema=schema)

# Print schema of DataFrame
sms.printSchema()
---------------------------------------------------------------------------
Data Preparation

Removing columns and rows
You previously loaded airline flight data from a CSV file. You're going to develop a model which will 
predict whether or not a given flight will be delayed.

In this exercise you need to trim those data down by:

removing an uninformative column and
removing rows which do not have information about whether or not a flight was delayed.
Note:: You might find it useful to revise the slides from the lessons in the Slides panel next to the IPython Shell.

# Remove the 'flight' column
flights = flights.drop('flight')

# Number of records with missing 'delay' values
flights.filter('delay IS NULL').count()

# Remove records with missing 'delay' values
flights = flights.filter('delay IS NOT NULL')

# Remove records with missing values in any column and get the number of remaining rows
flights = flights.dropna()
print(flights.count())
------------------------------------------------------------------------------------
Column manipulation
The Federal Aviation Administration (FAA) considers a flight to be "delayed" when it arrives 15 minutes or 
more after its scheduled time.

The next step of preparing the flight data has two parts:

convert the units of distance, replacing the mile column with a kmcolumn; and
create a Boolean column indicating whether or not a flight was delayed.
Instructions
0 XP
Import a function which will allow you to round a number to a specific number of decimal places.
Derive a new km column from the mile column, rounding to zero decimal places. One mile is 1,60934 km.
Remove the mile column.
Create a label column with a value of 1 indicating the delay was 15 minutes or more and 0 otherwise.


# Import the required function
from pyspark.sql.functions import round

# Convert 'mile' to 'km' and drop 'mile' column
flights_km = flights.withColumn('km', round(flights.mile * 1.60934, 0)) \
                    .drop('mile')

# Create 'label' column indicating whether flight delayed (1) or not (0)
flights_km = flights_km.withColumn('label', (flights_km.delay >= 15).cast('integer'))

# Check first five records
flights_km.show(5)

-----------------------------------------------------------------------------------------
Categorical columns

In the flights data there are two columns, carrier and org, which hold categorical data. You need to 
transform those columns into indexed numerical values.

Instructions

Import the appropriate class and create an indexer object to transform the carrier column from a string to an numeric index.
Prepare the indexer object on the flight data.
Use the prepared indexer to create the numeric index column.
Repeat the process for the org column.


from pyspark.ml.feature import StringIndexer

# Create an indexer
indexer = StringIndexer(inputCol='carrier', outputCol='carrier_idx')

# Indexer identifies categories in the data
indexer_model = indexer.fit(flights)

# Indexer creates a new column with numeric index values
flights_indexed = indexer_model.transform(flights)

# Repeat the process for the other categorical feature
flights_indexed = StringIndexer(inputCol='org', outputCol='org_idx').fit(flights_indexed).transform(flights_indexed)

----------------------------------------------------------------------------------------------
Assembling columns
The final stage of data preparation is to consolidate all of the predictor columns into a single column.

At present our data has the following predictor columns:

mon, dom and dow
carrier_idx (derived from carrier)
org_idx (derived from org)
km
depart
duration

Import the class which will assemble the predictors.
Create an assembler object that will allow you to merge the predictors columns into a single column.
Use the assembler to generate a new consolidated column.

# Import the necessary class
from pyspark.ml.feature import VectorAssembler

# Create an assembler object
assembler = VectorAssembler(inputCols=[
    'mon', 'dom', 'dow', 'carrier_idx', 'org_idx', 'km', 'depart', 'duration'
], outputCol='features')

# Consolidate predictor columns
flights_assembled = assembler.transform(flights)

# Check the resulting column
flights_assembled.select('features', 'delay').show(5, truncate=False)

------------------------------------------------------------------------------------------------------------
Decision Tree

Train/test split
To objectively assess a Machine Learning model you need to be able to test it on an independent set of data. 
You can't use the same data that you used to train the model: of course the model will perform (relatively) well on those data!

You will split the data into two components:

training data (used to train the model) and
testing data (used to test the model).

Instructions

Randomly split the flights data into two sets with 80:20 proportions. For repeatability set a random 
number seed of 17 for the split.

Check that the testing data has roughly 80% of the records from the original data.

# Split into training and testing sets in a 80:20 ratio
flights_train, flights_test = flights.randomSplit([0.8, 0.2],seed = 17)

# Check that training set has around 80% of records
training_ratio = flights_train.count() / flights_test.count()
print(training_ratio)


Build a Decision Tree
Now that you've split the flights data into training and testing sets, you can use the training set to fit a Decision Tree model.

The data are available as flights_train and flights_test.

NOTE: It will take a few seconds for the model to train... please be patient!
Import the class for creating a Decision Tree classifier.
Create a classifier object and fit it to the training data.
Make predictions for the testing data and take a look at the predictions.

# Import the Decision Tree Classifier class
from pyspark.ml.classification import DecisionTreeClassifier 

# Create a classifier object and fit to the training data
tree = DecisionTreeClassifier()
tree_model = tree.fit(flights_train)

# Create predictions for the testing data and take a look at the predictions
prediction = tree_model.transform(flights_test)
prediction.select('label', 'prediction', 'probability').show(5, False)


---------------------------------------------------------------------------------------

Evaluate the Decision Tree
You can assess the quality of your model by evaluating how well it performs on the testing data. 
Because the model was not trained on these data, this represents an objective assessment of the model.

A confusion matrix gives a useful breakdown of predictions versus known values. It has four cells which represent the counts of:

True Negatives (TN) — model predicts negative outcome & known outcome is negative
True Positives (TP) — model predicts positive outcome & known outcome is positive
False Negatives (FN) — model predicts negative outcome but known outcome is positive
False Positives (FP) — model predicts positive outcome but known outcome is negative.

Instructions

Create a confusion matrix by counting the combinations of label and prediction. Display the result.
Count the number of True Negatives, True Positives, False Negatives and False Positives.
Calculate the accuracy.

# Create a confusion matrix
prediction.groupBy("label", 'prediction').count().show()

# Calculate the elements of the confusion matrix
TN = prediction.filter('prediction = 0 AND label = prediction').count()
TP = prediction.filter('prediction = 1 AND label = prediction').count()
FN = prediction.filter('prediction = 0 AND label != prediction').count()
FP = prediction.filter('prediction = 1 AND label != prediction').count()

# Accuracy measures the proportion of correct predictions
accuracy = (TP/TN)
print(accuracy)

-----------------------------------------------------------------------------------------------
Build a Logistic Regression model

You've already built a Decision Tree model using the flights data. Now you're going to create a 
Logistic Regression model on the same data.


The objective is to predict whether a flight is likely to be delayed by at least 15 minutes (label 1) or not (label 0).

Although you have a variety of predictors at your disposal, you'll only use the mon, depart and 
duration columns for the moment. These are numerical features which can immediately be used for a Logistic Regression model. 
You'll need to do a little more work before you can include categorical features. Stay tuned!

The data have been split into training and testing sets and are available as flights_train and flights_test.

Import the class for creating a Logistic Regression classifier.
Create a classifier object and train it on the training data.
Make predictions for the testing data and create a confusion matrix.


# Import the logistic regression class
from pyspark.ml.classification import LogisticRegression

# Create a classifier object and train on training data
logistic = LogisticRegression().fit(flights_train)

# Create predictions for the testing data and show confusion matrix
prediction = logistic.transform(flights_test)
prediction.groupBy('label','prediction').count().show()

------------------------------------------------------------------------------------------------------------
Evaluate the Logistic Regression model
Accuracy is generally not a very reliable metric because it can be biased by the most common target class.

There are two other useful metrics:

precision and
recall.
Check the slides for this lesson to get the relevant expressions.

Precision is the proportion of positive predictions which are correct. For all flights which are predicted to 
be delayed, what proportion is actually delayed?

Recall is the proportion of positives outcomes which are correctly predicted. For all delayed flights, what 
proportion is correctly predicted by the model?

The precision and recall are generally formulated in terms of the positive target class. But it's also 
possible to calculate weighted versions of these metrics which look at both target classes.

The components of the confusion matrix are available as TN, TP, FN and FP, as well as the object prediction.


Find the precision and recall.
Create a multi-class evaluator and evaluate weighted precision.
Create a binary evaluator and evaluate AUC.

from pyspark.ml.evaluation import MulticlassClassificationEvaluator, BinaryClassificationEvaluator

# Calculate precision and recall
precision = TP / (TP + FP)
recall = TP / (TP + FN)
print('precision = {:.2f}\nrecall    = {:.2f}'.format(precision, recall))

# Find weighted precision
multi_evaluator = MulticlassClassificationEvaluator()
weighted_precision = multi_evaluator.evaluate(prediction, {multi_evaluator.metricName: "weightedPrecision"})

# Find AUC
binary_evaluator = BinaryClassificationEvaluator()
auc = binary_evaluator.evaluate(prediction, {binary_evaluator.metricName: "areaUnderROC"})

---------------------------------------------------------------------------------------------------------

Turning Text into Tables

Term-document matrix 

A selection of Children's books 

books.show(truncate=False) 
--------------------------------------------------------------------------------------------------

from pyspark.sql.functions import regexp_replace 
#Regular expression (REGEX) to match commas and hyphens 

REGEX = '[,\\-]'

books = books.withColumn('text', regexp_replace(books.text, REGEX,' '))

-----------------------------------------------------------------------------------------------------

Text to Tokens 

from pyspark.ml.feature import Tokenizer 
books = Tokenizer(inputCol="text", outputCol="tokens").transform(books)
--------------------------------------------------------------------------------------------------------
#Stop Words 

from pyspark.ml.feature import StopWordsRemover 

stopwords = StopWordsRemover()

#Take a look at the list of stop words 

stopwords.getStopWords()

------------------------------------------------------------------------------------------------------------

Feature Hashing 
Hashing trick, which in simple terms converts words into numbers. 

from pyspark.ml.feature import HashingTF 
hasher = HashingTF(inputCol="words", outputCol="hash', numFeatures=32)
books = hasher.transform(books)

The first list contains the hashed values and the second list indicates how many times each of those values occurs.  
For example, in the first 
document the word "long" has a hash of 8 and occurs twice. Similarly, the word "five" has a hash of 6 and occurs once 
in each of the last two
documents. 


from pyspark.ml.feature import IDF 
books = IDF(inputCol="hash", outputCol="features").fit(books).transform(books)

The final step is to accountfor some words occurring frequently across many documents. If a word appears in many documents then 
it's probably going to be less useful for building a classifier. We want to weight to the number of counts for a word in a particular
document against how frequently that word occurs across all documents. To do this you reduce the effective count for more common 
words, giving what is known as the "inverse document frequency". 

Inverse document frequency is generated by the IDF class, which is first fit to the hashed data and then used to 
generate weighted counts. 

The word "five", for example, occurs in multiple documents, so its effective frequency is reduced. 

The inverse document frequencies are precisely what we need for building a Machine Learning model. 




Punctuation, numbers and tokens
At the end of the previous chapter you loaded a dataset of SMS messages which had been 
labeled as either "spam" (label 1) or "ham" (label 0). You're now going to use those data to build a classifier model.

But first you'll need to prepare the SMS messages as follows:

remove punctuation and numbers
tokenize (split into individual words)
remove stop words
apply the hashing trick
convert to TF-IDF representation.
In this exercise you'll remove punctuation and numbers, then tokenize the messages.

The SMS data are available as sms.


Import the function to replace regular expressions and the feature to tokenize.
Replace all punctuation characters from the text column with a space. Do the same for all numbers in the text column.
Split the text column into tokens. Name the output column words.

# Import the necessary functions
from pyspark.sql.functions import regexp_replace
from pyspark.ml.feature import Tokenizer

# Remove punctuation (REGEX provided) and numbers
wrangled = sms.withColumn('text', regexp_replace(sms.text, '[_():;,.!?\\-]', ' '))
wrangled = wrangled.withColumn('text', regexp_replace(wrangled.text, '[0-9]', ' '))

# Merge multiple spaces
wrangled = wrangled.withColumn('text', regexp_replace(wrangled.text, ' +', ' '))

# Split the text into words
wrangled = Tokenizer(inputCol='text', outputCol='words').transform(wrangled)

wrangled.show(4, truncate=False)

---------------------------------------------------------------------------------

Stop words and hashing
The next steps will be to remove stop words and then apply the hashing trick, converting the results into a TF-IDF.

A quick reminder about these concepts:

The hashing trick provides a fast and space-efficient way to map a very large (possibly infinite) set of items (in this case, 
all words contained in the SMS messages) onto a smaller, finite number of values.
The TF-IDF matrix reflects how important a word is to each document. It takes into account both the frequency of the word 
within each document but also the frequency of the word across all of the documents in the collection.
The tokenized SMS data are stored in sms in a column named words. You've cleaned up the handling of spaces in the data 
so that the tokenized text is neater.


Import the StopWordsRemover, HashingTF and IDF classes.
Create a StopWordsRemover object (input column words, output column terms). Apply to sms.
Create a HashingTF object (input results from previous step, output column hash). Apply to wrangled.
Create an IDF object (input results from previous step, output column features). Apply to wrangled.

from pyspark.ml.feature import StopWordsRemover, HashingTF, IDF

# Remove stop words.
wrangled = StopWordsRemover(inputCol='words', outputCol='terms')\
      .transform(sms)

# Apply the hashing trick
wrangled = HashingTF(inputCol='terms', outputCol='hash', numFeatures=1024)\
      .transform(wrangled)

# Convert hashed symbols to TF-IDF
tf_idf = IDF(inputCol='hash', outputCol='features')\
      .fit(wrangled).transform(wrangled)
      
tf_idf.select('terms', 'features').show(4, truncate=False)

HINT:
These classes are found in pyspark.ml.feature.
Call the transform() method to create a StopWordsRemover object.
Call the transform() method to create a HashingTF object. The output column from StopWordsRemover becomes the input column for HashingTF.
Call the fit() and transform() methods to create an IDF object. The output column from  HashingTF becomes the input column for IDF.
-------------------------------------------------------------------------------------------
Training a spam classifier
The SMS data have now been prepared for building a classifier. Specifically, this is what you have done:

removed numbers and punctuation
split the messages into words (or "tokens")
removed stop words
applied the hashing trick and
converted to a TF-IDF representation.
Next you'll need to split the TF-IDF data into training and testing sets. Then you'll use the training 
data to fit a Logistic Regression model and finally evaluate the performance of that model on the testing data.

The data are stored in sms and LogisticRegression has been imported for you.

Split the data into training and testing sets in a 4:1 ratio. Set the random number seed to 13 to ensure repeatability.
Create a LogisticRegression object and fit it to the training data.
Generate predictions on the testing data.
Use the predictions to form a confusion matrix.

# Split the data into training and testing sets
sms_train, sms_test = sms.randomSplit([0.8, 0.2], seed=13)

# Fit a Logistic Regression model to the training data
logistic = LogisticRegression(regParam=0.2).fit(sms_train)

# Make predictions on the testing data
prediction = logistic.transform(sms_test)

# Create a confusion matrix, comparing predictions to known labels
prediction.groupBy('label', 'prediction').count().show()

------------------------------------------------------------------------------------
Hint
Use the randomSplit() method. The weights should be [0.8, 0.2]. Specify the seed argument.
The LogisticRegression() class is defined in pyspark.ml.classification. Call the fit() method.
Call the transform() method.
Group the data by label and prediction then count() and show() the results.


--------------------------------------------------------------------------------------

One-Hot Encoding

The first step is to create a column for each of the levels. Effectively you then place a check in the column corresponding 
to the value in each row. Each categorical level becomes a column. Binary values indicate the presence (1) or absence (0) 
of the corresponding level. Sparse representation: store column index and value. The process of creating dummy 
variables is called 'One-Hot'.

from pyspark.ml.feature import OneHotEncoderEstimator 
onehot = OneHotEncoderEstimator(inputCols=['type_idx'], outputCols=['type_dummy']

#When instantiating the class you need to specify the names of the input and output columns.  

#Fit the encoder to the data

Onehot = onehot.fit(cars)

#How many category levels? 
onehot.categorySizes 

cars = onehot.transform(cars)
cars.select('type','type_idx', 'type_dummy').distinct().sort('type_idx').show()

#Now that the encoder is setup it can be applied to the data by calling the transform() method. 

#Dense versus sparse 

from pyspark.mllib.linalg import DenseVector, SparseVector 

#Suppose that you want to stor a vector which consists mostly of zeros.  
#You could store it as a dense vector, in which each of the elements of the vector is stored explicitly. 

#A sparse representation is a much better alternative. 

One hot encoding is a common technique used to work with categorical features. There are multiple tools available 
to facilitate this pre-processing step in Python, but it usually becomes much harder when you need your code to work 
on new data that might have missing or additional values.

That's the case if you want to deploy a model to production for instance, sometimes you don't know what new values 
will appear in the data you receive.

In this tutorial we will present two ways of dealing with this problem. Everytime, we will first run one hot encoding on 
our training set and save a few attributes that we can reuse later on, when we need to process new data.

If you deploy a model to production, the best way of saving those values is writing your own class and define them 
as attributes that will be set at training, as an internal state.

What is Categorical Data?
Categorical data are variables that contain label values rather than numeric values.

The number of possible values is often limited to a fixed set.

Categorical variables are often called nominal.

Some examples include:

A “pet” variable with the values: “dog” and “cat“.
A “color” variable with the values: “red“, “green” and “blue“.
A “place” variable with the values: “first”, “second” and “third“.
Each value represents a different category.

Some categories may have a natural relationship to each other, such as a natural ordering.

The “place” variable above does have a natural ordering of values. This type of categorical variable is called an ordinal variable.

What is the Problem with Categorical Data?
Some algorithms can work with categorical data directly.

For example, a decision tree can be learned directly from categorical data with no data transform 
required (this depends on the specific implementation).

Many machine learning algorithms cannot operate on label data directly. They require all input variables 
and output variables to be numeric.

In general, this is mostly a constraint of the efficient implementation of machine learning algorithms 
rather than hard limitations on the algorithms themselves.

This means that categorical data must be converted to a numerical form. If the categorical variable is an 
output variable, you may also want to convert predictions by the model back into a categorical form in order 
to present them or use them in some application.
----------------------------------------------------------------------------------------

Encoding flight origin
The org column in the flights data is a categorical variable giving the airport from which a flight departs.

ORD — O'Hare International Airport (Chicago)
SFO — San Francisco International Airport
JFK — John F Kennedy International Airport (New York)
LGA — La Guardia Airport (New York)
SMF — Sacramento
SJC — San Jose
TUS — Tucson International Airport
OGG — Kahului (Hawaii)
Obviously this is only a small subset of airports. Nevertheless, since this is a categorical variable, it needs to be 
one-hot encoded before it can be used in a regression model.

The data are in a variable called flights. You have already used a string indexer to create a column of indexed 
values corresponding to the strings in org.

Note:: You might find it useful to revise the slides from the lessons in the Slides panel next to the IPython Shell.
Import the one-hot encoder class.
Create an one-hot encoder instance, naming the output column 'org_dummy'.
Apply the one-hot encoder to the flights data.
Generate a summary of the mapping from categorical values to binary encoded dummy variables. 
Include only unique values and order by org_idx.

# Import the one hot encoder class
from pyspark.ml.feature import OneHotEncoderEstimator

# Create an instance of the one hot encoder
onehot = OneHotEncoderEstimator(inputCols=['org_idx'], outputCols=['org_dummy'])

# Apply the one hot encoder to the flights data
onehot = onehot.fit(flights)
flights_onehot = onehot.transform(flights)

# Check the results
flights_onehot.select('org', 'org_idx', 'org_dummy').distinct().sort('org_idx').show()


Encoding shirt sizes
You have data for a consignment of t-shirts. The data includes the size of the shirt, which is given as either S, M, L or XL.

Here are the counts for the different sizes:

+----+-----+
|size|count|
+----+-----+
|   S|    8|
|   M|   15|
|   L|   20|
|  XL|    7|
+----+-----+
The sizes are first converted to an index using StringIndexer and then one-hot encoded using OneHotEncoderEstimator.

Which of the following is not true:

Answer the question
50 XP
Possible Answers
S shirts get index 2.0 and are one-hot encoded as (3,[2],[1.0])
press
1
M shirts get index 1.0 and are one-hot encoded as (3,[1],[1.0])
press
2
L shirts get index 0.0 and are one-hot encoded as (3,[0],[1.0])
press
3
XL shirts get index 3.0 and are one-hot encoded as (3,[3],[1.0])
press

This statement is true: M is the second most frequent size. It receives and index of 1 and is one-hot encoded to column 1.
This statement is true: L is the most frequent size. It receives and index of 0 and is one-hot encoded to column 0.

Correct! This statement is false: XL is the least frequent size, so it receives an index of 3. However, it is one-hot 
encoded to (3,[],[]) because it does not get it's own dummy variable. If none of the other dummy variables are true, 
then this one must be true. So to make a separate dummy variable would be redundant!
--------------------------------------------------------------------------------------------------------------------

Regression 

Categorical features is essential for building regression models. 

Want to predict fuel consumption using vehicle mass. A scatter plot is a good way to visualize the 
relationship between those two variables. Only a subset of the data are included in this plot, but 
it's clear that consumption increases with mass. 

A model should describe the average relationship of consumption to mass, without necessarily passing through individual points. 

First we need to define the concept of residuals. The residual is the difference between the observed value and the corresponding
modeled value. 

The best model would somehow make these residuals as small as possible. 

Loss Function: 

MSE = "Mean Squared Error" 

Regression loss
1. Mean Square Error, Quadratic loss, L2 Loss
Mean Square Error (MSE) is the most commonly used regression loss function. 
MSE is the sum of squared distances between our target variable and predicted values.

Below is a plot of an MSE function where the true target value is 100, and the predicted values 
range between -10,000 to 10,000. The MSE loss (Y-axis) reaches its minimum value at prediction (X-axis) = 100. 
The range is 0 to ∞.


2. Mean Absolute Error, L1 Loss
Mean Absolute Error (MAE) is another loss function used for regression models. MAE is the sum of absolute 
differences between our target and predicted variables. So it measures the average magnitude of errors in a 
set of predictions, without considering their directions. (If we consider directions also, that would be called 
Mean Bias Error (MBE), which is a sum of residuals/errors). The range is also 0 to ∞.

MSE vs. MAE (L2 loss vs L1 loss)
In short, using the squared error is easier to solve, but using the absolute error is more robust to outliers. 
But let’s understand why!
Whenever we train a machine learning model, our goal is to find the point that minimizes loss function. 
Of course, both functions reach the minimum when the prediction is exactly equal to the true value.


MAE loss is useful if the training data is corrupted with outliers (i.e. we erroneously receive unrealistically 
huge negative/positive values in our training environment, but not our testing environment).
Intuitively, we can think about it like this: If we only had to give one prediction for all the observations 
that try to minimize MSE, then that prediction should be the mean of all target values. But if we try to minimize MAE, 
that prediction would be the median of all observations. We know that median is more robust to outliers than mean, which 
consequently makes MAE more robust to outliers than MSE.

3. Huber Loss, Smooth Mean Absolute Error
Huber loss is less sensitive to outliers in data than the squared error loss. It’s also differentiable at 0. 
It’s basically absolute error, which becomes quadratic when error is small. How small that error has to be to make it 
quadratic depends on a hyperparameter, 𝛿 (delta), which can be tuned. Huber loss approaches MAE when 𝛿 ~ 0 and MSE when 
𝛿 ~ ∞ (large numbers.)


4. Log-Cosh Loss
Log-cosh is another function used in regression tasks that’s smoother than L2. Log-cosh is 
the logarithm of the hyperbolic cosine of the prediction error.
Advantage: log(cosh(x)) is approximately equal to (x ** 2) / 2 for small x and to abs(x) - log(2) for large x. 
This means that 'logcosh' works mostly like the mean squared error, but will not be so strongly affected by the 
occasional wildly incorrect prediction. It has all the advantages of Huber loss, and it’s twice differentiable 
everywhere, unlike Huber loss.
Why do we need a 2nd derivative? Many ML model implementations like XGBoost use Newton’s method to find the 
optimum, which is why the second derivative (Hessian) is needed. For ML frameworks like XGBoost, twice differentiable 
functions are more favorable.


5. Quantile Loss
In most of the real world prediction problems, we are often interested to know about the uncertainty in our 
predictions. Knowing about the range of predictions as opposed to only point estimates can significantly improve 
decision making processes for many business problems.
Quantile loss functions turn out to be useful when we are interested in predicting an interval instead of only 
point predictions. Prediction interval from least square regression is based on an assumption that residuals (y — y_hat) 
have constant variance across values of independent variables. We can not trust linear regression models which violate this 
assumption. We can not also just throw away the idea of fitting linear regression model as baseline by saying that such 
situations would always be better modeled using non-linear functions or tree based models. This is where quantile loss and 
quantile regression come to rescue as regression based on quantile loss provides sensible prediction intervals even for 
residuals with non-constant variance or non-normal distribution.


Out of all possible models, the best model is found by minimizing a loss function, which is an equation that describes how 
well the model fits the data. This is the equation for the mean squared error loss function. 

You've got the observed values, y_i - observed values 
y hat _i - model values 

The difference between these is the residual. 

The residuals are squared and then summed together. Dividing through by the number of data points to give the mean or average. 

By minimizing the loss function you are effectively minimizing the average residual or the average distance 
between the observed and modeled values. 

Spark will do the math for you.  


Let's build a regression model to predict fuel consumption using three predictors:
Predit consumption using: mass, cyl and type_dummy. 
Consolidate predictors into a single column.  
Predictors and assemble them into a single column called 'features'.

The data are then randomly split into training and testing sets.  


Build regression model 
--------------------------------------
from pyspark.ml.regression import LinearRegression 
regression = LinearRegression(labelCol='consumption') 

#By default this class expects to find the target data in a column called "label". Since you are aiming to predict the 
#"consumption" column you need to explicitly specify the name of the label column when creating a regression object. 

Fit to cars_train (training data)

#Next train the model on the training data using the fit() method. 

regression = regression.fit(cars_train) 

#Predict on cars_test (testing data) 
predictions = regression.transform(cars_test)

#The trained model can then be used to making predictions on the tesing data using the 
#transform() method. 

#Examine predictions 
#Comparing the predicted values to the known values from the testing data you'll see that there is resonable agreement. 
#A plot gives a clearer picture. 
#The dashed diagonal lie represents perfect prediction. 
#Most of the points lie close to this line, which is good. 
#Useful to have a single number which summarizes the performance of a model. 

#Calculate RMSE 

from pyspark.ml.evaluation import RegressionEvaluator 
#Find RMSE (ROOT MEAN SQUARED ERROR)

RegressionEvaluator(labelCol='consumption').evaluate(predictions) 

#For classifiers there are a variety of such metrics. The Root Mean Squared Error is often used for regression models. 



A RegressionEvaluator can also calculate the following metrics:
mae (Mean Absolute Error)
r2 (R^2)
mse (Mean Squared Error) 

#The metics for a classifier, like accuracy, precision and recall, are measured on an absolute scale where it's possible to 
#immediately identify value that are "good" or "bad". 
#Values of RMSE are relative to the scale of the value that you're aiming to predict, so interpretation is a little more 
#challenging. 

#A smaller RMSE, always indicates better predictions. 

#The intercept is the value predicted by the model when all predictors are zero. On the plot this is the point where the model line 
#intersects the vertical dashed line.  

regression.intercept 

#This is the fuel consumption in the (hypothetical) case that: 

#mass = 0 
#cyl = 0 and 
#vehicle type is 'Van'. 

#Examine Coefficients 

regression.coefficients 

#The coefficients attribute gives you access to those values.  There's a coefficient for each of the predictors. 
#The coefficients for mass and number of cylinders are positive, indicating that heavier cars with more cylinders consume more fuel. 
#These coefficients also represent the rate of change for the corresponding predictor. 
#The coefficient for mass indicates the change in fuel consumption when mass increases by one unit. 


Flight duration model: Just distance
In this exercise you'll build a regression model to predict flight duration (the duration column).

For the moment you'll keep the model simple, including only the distance of the flight (the km column) as a predictor.

The data are in flights. The first few records are displayed in the terminal. These data have also been 
split into training and testing sets and are available as flights_train and flights_test.

Create a linear regression object. Specify the name of the label column. Fit it to the training data.
Make predictions on the testing data.
Create a regression evaluator object and use it to evaluate RMSE on the testing data.

from pyspark.ml.regression import LinearRegression
from pyspark.ml.evaluation import RegressionEvaluator

# Create a regression object and train on training data
regression = LinearRegression(labelCol='duration').fit(flights_train)

# Create predictions for the testing data and take a look at the predictions
predictions = regression.transform(flights_test)
predictions.select('duration', 'prediction').show(5, False)

# Calculate the RMSE
RegressionEvaluator(labelCol='duration').evaluate(predictions)


---------------------------------------------------------------------

Interpreting the coefficients
The linear regression model for flight duration as a function of distance takes the form

duration=α+β×distance
where

α — intercept (component of duration which does not depend on distance) and
β — coefficient (rate at which duration increases as a function of distance; also called the slope).
By looking at the coefficients of your model you will be able to infer

how much of the average flight duration is actually spent on the ground and
what the average speed is during a flight.
The linear regression model is available as regression.

What's the intercept?
What are the coefficients? This is a vector.
Extract the slope for distance by indexing into the vector.
Find the average speed in km per hour.


# Intercept (average minutes on ground)
inter = regression.intercept
print(inter)

# Coefficients
coefs = regression.coefficients
print(coefs)

# Average minutes per km
minutes_per_km = regression.coefficients[0]
print(minutes_per_km)

# Average speed in km per hour
avg_speed = 60 / minutes_per_km
print(avg_speed)

-----------------------------------------------

Flight duration model: Adding origin airport
Some airports are busier than others. Some airports are bigger than others too. 
Flights departing from large or busy airports are likely to spend more time taxiing or waiting 
for their takeoff slot. So it stands to reason that the duration of a flight might depend not only 
on the distance being covered but also the airport from which the flight departs.

You are going to make the regression model a little more sophisticated by including the departure 
airport as a predictor.

These data have been split into training and testing sets and are available as flights_train and flights_test. 
The origin airport, stored in the org column, has been indexed into org_idx, which in turn has been one-hot 
encoded into org_dummy. The first few records are displayed in the terminal.


Split the data into training (80%) and testing (20%) sets. Use a random number seed of 13 for repeatability.
Fit a linear regression model to the training data.
Make predictions for the testing data.
Calculate the RMSE for predictions on the testing data.

from pyspark.ml.regression import LinearRegression
from pyspark.ml.evaluation import RegressionEvaluator

# Create a regression object and train on training data
regression = LinearRegression(labelCol='duration').fit(flights_train)

# Create predictions for the testing data
predictions = regression.transform(flights_test)

# Calculate the RMSE on testing data
RegressionEvaluator(labelCol='duration').evaluate(predictions)

---------------------------------------------------------------------------------------



Interpreting coefficients
Remember that origin airport, org, has eight possible values (ORD, SFO, JFK, LGA, SMF, SJC, TUS and OGG) which have been 
one-hot encoded to seven dummy variables in org_dummy.

The values for km and org_dummy have been assembled into features, which has eight columns with sparse 
representation. Column indices in features are as follows:

0 — km
1 — ORD
2 — SFO
3 — JFK
4 — LGA
5 — SMF
6 — SJC and
7 — TUS.
Note that OGG does not appear in this list because it is the reference level for the origin airport category.

In this exercise you'll be using the intercept and coefficients attributes to interpret the model.

The coefficients attribute is a list, where the first element indicates how flight duration changes with flight distance.


# Average speed in km per hour
avg_speed_hour = 60 / regression.coefficients[0]
print(avg_speed_hour)

# Average minutes on ground at OGG
inter = regression.intercept
print(inter)

# Average minutes on ground at JFK
avg_ground_jfk = inter + regression.coefficients[3]
print(avg_ground_jfk)

# Average minutes on ground at LGA
avg_ground_lga = inter + regression.coefficients[4]
print(avg_ground_lga)

You're going to spend over an hour on the ground at JFK or LGA but only around 15 minutes at OGG.
------------------------------------------------------------------------------------------------------------

Bucketing & Engineering

#RPM buckets 

from pyspark.ml.feature import Bucketizer
bucketizer = Bucketizer (splits=[3500,4500,600,6500], 
                          inputCol="rpm",
                          outputCol="rpm_bin")


#"splits" argument and also providing the names of the input and output columns. 

#Apply buckets to rpm column.  

cars = bucketizer.transform(cars)

#RPM buckets 
buckedted.select('rpm','rpm_bin').show(5)

#The result has a new column with the discrete bucket values. 

cars.groupBy('rpm_bin').count().show()

#One-hot encoded RPM buckets 
#The RPM buckets are one-hot encoded to dummy variables.  

#The 'high' RPM bucket is the reference level and doesn't get a dummy variable.  

Bucketing departure time
Time of day data are a challenge with regression models. They are also a great candidate for bucketing.

In this lesson you will convert the flight departure times from numeric values between 0 (corresponding to 00:00) 
and 24 (corresponding to 24:00) to binned values. You'll then take those binned values and one-hot encode them.

Create a bucketizer object with bin boundaries which correspond to 0:00, 03:00, 06:00, ..., 24:00. Specify input column as 
depart and output column as depart_bucket.
Bucket the departure times. Show the first five values for depart and depart_bucket.
Create a one-hot encoder object. Specify output column as depart_dummy.
Train the encoder on the data and then use it to convert the bucketed departure times to dummy variables. Show the first 
five values for depart, depart_bucket and depart_dummy.


from pyspark.ml.feature import Bucketizer, OneHotEncoderEstimator

# Create buckets at 3 hour intervals through the day
buckets = Bucketizer(splits=[0, 3, 6, 9, 12, 15, 18, 21, 24], inputCol='depart', outputCol='depart_bucket')

# Bucket the departure times
bucketed = buckets.transform(flights)
bucketed.select('depart', 'depart_bucket').show(5)

# Create a one-hot encoder
onehot = OneHotEncoderEstimator(inputCols=['depart_bucket'], outputCols=['depart_dummy'])

# One-hot encode the bucketed departure times
flights_onehot = onehot.fit(bucketed).transform(bucketed)
flights_onehot.select('depart', 'depart_bucket', 'depart_dummy').show(5)

Now you can add departure time to your regression model.


Flight duration model: Adding departure time
In the previous exercise the departure time was bucketed and converted to dummy variables. 
Now you're going to include those dummy variables in a regression model for flight duration.

The data are in flights. The km, org_dummy and depart_dummy columns have been assembled into features, 
where km is index 0, org_dummy runs from index 1 to 7 and depart_dummy from index 8 to 14.

The data have been split into training and testing sets and a linear regression model, 
regression, has been built on the training data. Predictions have been made on the testing data and are available as predictions.

Find the RMSE for predictions on the testing data.
Find the average time spent on the ground for flights departing from OGG between 21:00 and 24:00.
Find the average time spent on the ground for flights departing from OGG between 00:00 and 03:00.
Find the average time spent on the ground for flights departing from JFK between 00:00 and 03:00.

# Find the RMSE on testing data
from pyspark.ml.evaluation import RegressionEvaluator
RegressionEvaluator(labelCol='duration').evaluate(predictions)

# Average minutes on ground at OGG for flights departing between 21:00 and 24:00
avg_eve_ogg = regression.intercept
print(avg_eve_ogg)

# Average minutes on ground at OGG for flights departing between 00:00 and 03:00
avg_night_ogg = regression.intercept + regression.coefficients[8]
print(avg_night_ogg)

# Average minutes on ground at JFK for flights departing between 00:00 and 03:00
avg_night_jfk = regression.intercept + regression.coefficients[8] + regression.coefficients[3]
print(avg_night_jfk)


-----------------------------------------------------------------------
Regularization

A linear regression model attempts to derive a coefficient for each feature in the data.
The coefficients quantify the effect of the corresponding features. 
More features imply more coefficients. 

This works well when your dataset has a few columns and many rows. 
The obvious solution is to simply select the "best" subset of columns. 

The feature selection:  known as "penalized regression". Linear regression aims to minimise the MSE. 
The basic idea is that the model is penalized, or punished, for having too many coefficients.  

Recall that the conventional regression algorithm chooses coefficients to minimize the loss function, 
which is average of the squared residuals. 

A good model will result in low MSE because its predictions will be close to the observed values. 

With penalized regression an additional "regularization" or "shrinkage" term is added to the loss function. 


Regularization term 
An extra regularization term is added to the loss function. 

Lasso --- absolute value of the coefficients 
Ridge ---- square of the coefficients 

Ridge will result in those coefficients being close to zero.  
Lasso will actually force them to zero precisely. 

Also you can mix Lasso and Ridge. 


Strength of regularization determined by parameter lambda: 

* lambda = 0 - no regularization (standard regression) 
* lambda = infinty - complete regularization (all coefficients zero) 

The strength of the regularization is determined by a parameter which is generally denoted by the Greek 
symbol lambda. 

When lambda = 0 there is no regularization and when lambda is large regularization completely dominates. 


assembler = VectorAssembler(inputCols=['mass', 'cyl', 'type_dummy', 'density_line', 'density_quad', 'density_cube'],
outputCol='features')

cars = assembler.transform(cars) 

Split these data into training and testing sets.  

Fit a (standard) Linear Regression model to the training data. 

regression = LinearRegression(labelCol='consumption').fit(cars_train) 

Let's start by fitting a standard linear regression model to the training data. You can then make predictions 
on the testing data and calculate the RMSE. 

Examine the coefficients:

regression.coefficients 

when you look at the model coefficients you find that all predictors have beeen assigned non-zero values. 
This means that every predictor is contributing to the model.  The features are actually important for 
prediciting consumption. 

Ridge regression 
ridge = LinearRegression(labelCol = 'consumption', elasticNetparam=0, regParam=0.1)
ridge.fit(car_train) 


Flight duration model: More features!
Let's add more features to our model. This will not necessarily result in a better model. Adding 
some features might improve the model. Adding other features might make it worse.

More features will always make the model more complicated and difficult to interpret.

These are the features you'll include in the next model:

km
org (origin airport, one-hot encoded, 8 levels)
depart (departure time, binned in 3 hour intervals, one-hot encoded, 8 levels)
dow (departure day of week, one-hot encoded, 7 levels) and
mon (departure month, one-hot encoded, 12 levels).
These have been assembled into the features column, which is a sparse representation of 32 columns 
(remember one-hot encoding produces a number of columns which is one fewer than the number of levels).

The data are available as flights, randomly split into flights_train and flights_test. The object 
predictions is also available.

Fit a linear regression model to the training data.
Generate predictions for the testing data.
Calculate the RMSE on the testing data.
Look at the model coefficients. Are any of them zero?


from pyspark.ml.regression import LinearRegression
from pyspark.ml.evaluation import RegressionEvaluator

# Fit linear regression model to training data
regression = LinearRegression(labelCol='duration').fit(flights_train)

# Make predictions on testing data
predictions = regression.transform(flights_test)

# Calculate the RMSE on testing data
rmse = RegressionEvaluator(labelCol='duration').evaluate(predictions)
print("The test RMSE is", rmse)

# Look at the model coefficients
coeffs = regression.coefficients
print(coeffs)

Flight duration model: Regularisation!
In the previous exercise you added more predictors to the flight duration model. 
The model performed well on testing data, but with so many coefficients it was difficult to interpret.

In this exercise you'll use Lasso regression (regularized with a L1 penalty) to create 
a more parsimonious model. Many of the coefficients in the resulting model will be set 
to zero. This means that only a subset of the predictors actually contribute to the model. 
Despite the simpler model, it still produces a good RMSE on the testing data.

You'll use a specific value for the regularization strength. Later you'll learn how to find 
the best value using cross validation.

The data (same as previous exercise) are available as flights, randomly split into flights_train 
and flights_test.


Fit a linear regression model to the training data.
Calculate the RMSE on the testing data.
Look at the model coefficients.
Get the count of coefficients equal to 0.


from pyspark.ml.regression import LinearRegression
from pyspark.ml.evaluation import RegressionEvaluator

# Fit Lasso model (α = 1) to training data
regression = LinearRegression(labelCol='duration', regParam=1, elasticNetParam=1).fit(flights_train)

# Calculate the RMSE on testing data
rmse = RegressionEvaluator(labelCol='duration').evaluate(regression.transform(flights_test))
print("The test RMSE is", rmse)

# Look at the model coefficients
coeffs = regression.coefficients
print(coeffs)

# Number of zero coefficients
zero_coeff = sum([beta == 0 for beta in regression.coefficients])
print("Number of ceofficients equal to 0:", zero_coeff)
--------------------------------------------------------------------------------------------


Pipeline

Leakage 
.fit()  Only for training data. Really robust results you need to be careful only to apply the 
fit() method to training data.

Because if a fit() method is applied to *any* of the testing data then the model will effectively.
have seen those data during the training phase, so the results of testing will no longer be objective.  
The transform() method, on the other hand, can be applied to both training and testing data since it does
not result in any changes in the underlying model.  

Leakage occurs whenever a fit() method is applied to testing data. Suppose that you fit a model 
using both the training and testing data. The model would then already have *seen* the testing data,
so using those data to test the model. 

A pipeline will make it easier to avoid leakage because it simplifies the training and testing process.


Pipeline -  A pipeline consists of a series of operations. You could apply each operation 
individually or you could just apply the pipeline.

First you fit the indexer to the training data. Then you can the transform() method on the training data to 
add the indexed column. Then you call the transform() method on the testing data to add the indexed column 
there too. Note that the testing data was not used to fit the indexer. Next you do the same 
things for the one-hot encoder, fitting to the training data and then using the fitted encoder to update the 
training and testing data sets. The assembler is next. In this case there is no fit( method, so you simply
apply the transform() method to the training and testing data. Finally the data are ready. You fit 
the regression model to the training data and then use the model to make predictions on the testing data.
Throughout the process you've been careful to keep the testing data out of the training process. 
But this is hard work and it's easy enough to slip up. A pipleine makes training and testing a 
complicated mode a lot eassier. The pipeline class lives in the ml sub-module. You create a pipline by
specifying a sequence of stages. Where each stage corresponds to a step in the model building process.  The 
stages are excuted in order. Now, rather than calling the fit( and transform() methods for each 
stage, you simply call the fit() method for the pipeline on the training data.  Each of the stages in the pipeline
is then automatically applied to the training data in turn. This will systematically apply() and transform()
methods for each stage in the pipeline.The trained pipeline can then be used to make predictions on the testing
data by calling its transform() method. The pipeline transform() method will only call the transform()
method for each of the stages in the pipeline. You can access the stages in the pipeline by using the stage attribute, 
which is a list. 


For example, to access the regression component of the pipeline you'd use an index of 3 
Having access to that component makes it possible to get the intercept and coefficients for the trained 
LinearRegression model. 


Flight duration model: Pipeline stages
You're going to create the stages for the flights duration model pipeline. 
You will use these in the next exercise to build a pipeline and to create a regression model.

Create an indexer to convert the 'org' column into an indexed column called 'org_idx'.
Create a one-hot encoder to convert the 'org_idx' and 'dow' columns into dummy variable columns called 'org_dummy' and 'dow_dummy'.
Create an assembler which will combine the 'km' column with the two dummy variable columns. The output column should be 
called 'features'.
Create a linear regression object to predict flight duration.
Note:: You might find it useful to revisit the slides from the lessons in the Slides panel next to the IPython Shell.

# Convert categorical strings to index values
indexer = StringIndexer(inputCol='org', outputCol='org_idx')

# One-hot encode index values
onehot = OneHotEncoderEstimator(
    inputCols=['org_idx', 'dow'],
    outputCols=['org_dummy', 'dow_dummy']
)

# Assemble predictors into a single column
assembler = VectorAssembler(inputCols=['km', 'org_dummy', 'dow_dummy'], outputCol='features')

# A linear regression object
regression = LinearRegression(labelCol='duration')


Flight duration model: Pipeline model
You're now ready to put those stages together in a pipeline.

You'll construct the pipeline and then train the pipeline on the training data. This will apply each of the 
individual stages in the pipeline to the training data in turn. None of the stages will be exposed to the testing data at 
all: there will be no leakage!

Once the entire pipeline has been trained it will then be used to make predictions on the testing data.

The data are available as flights, which has been randomly split into flights_train and flights_test.

Import the class for creating a pipeline.
Create a pipeline object and specify the indexer, onehot, assembler and regression stages, in this order.
Train the pipeline on the training data.
Make predictions on the testing data.

# Import class for creating a pipeline
from pyspark.ml import Pipeline

# Construct a pipeline
pipeline = Pipeline(stages=[indexer, onehot, assembler, regression])

# Train the pipeline on the training data
pipeline = pipeline.fit(flights_train)

# Make predictions on the testing data
predictions = pipeline.transform(flights_test)


SMS spam pipeline
You haven't looked at the SMS data for quite a while. Last time we did the following:

split the text into tokens
removed stop words
applied the hashing trick
converted the data from counts to IDF and
trained a linear regression model.
Each of these steps was done independently. This seems like a great application for a pipeline!


Create an object for splitting text into tokens.
Create an object to remove stop words. Rather than explicitly giving the input column name, use the getOutputCol() 
method on the previous object.
Create objects for applying the hashing trick and transforming the data into a TF-IDF. Use the getOutputCol() method again.
Create a pipeline which wraps all of the above steps as well as an object to create a Logistic Regression model.


from pyspark.ml.feature import Tokenizer, StopWordsRemover, HashingTF, IDF

# Break text into tokens at non-word characters
tokenizer = Tokenizer(inputCol='text', outputCol='words')

# Remove stop words
remover = StopWordsRemover(inputCol=tokenizer.getOutputCol(), outputCol='terms')

# Apply the hashing trick and transform to TF-IDF
hasher = HashingTF(inputCol=remover.getOutputCol(), outputCol="hash")
idf = IDF(inputCol=hasher.getOutputCol(), outputCol="features")

# Create a logistic regression object and add everything to a pipeline
logistic = LogisticRegression()
pipeline = Pipeline(stages=[tokenizer, remover, hasher, idf, logistic])


------------------------------------------------------------------------------------------------------

Cross-Validation

Cross-Validation - How well a model works if you were able to test it multiiple times.  

Remember that before splitting it's important to first randomize the data so that the distributions in the training and 
testing data are similar. You then split the training data into a number of partitions or "folds". 
The number of folds normally factors into the name of the technique.  For example, if you split into five folds then you'd  talk
about 5-fold cross-validation.  Once the training data have been split into folds you can start cross-validating. 

First keep aside the data in the first fold. Train a model on the remaining four folds. Then evaluate that model on the data 
from the first fold. This will give the first value for the evaluation metric.  
Next you move onto the second fold, where the same process is repeated: data in the second fold are set aside for testing while
the remaining four folds are used to train a model.  That model is tested on the second fold data, yielding the second value
for the evaluation metric. You repeat the process for the remaining folds. Each of the folds is used in turn as testing data and 
you end up with as many values for the evaluation as there are folds. At this point you are in a position to calculate 
the average of the evaluation metric over all folds, which is a much more robust measure of model performance than a single 
value. 

Build a cross-validated regression model to predict consumption. 

Estimator and evaluator:  An object to build the model. This can be a pipeline.
Here are the first two ingredients which you need to perform cross-validated. 

regression = LinearRegression(labelCol='consumption') 

An estimator, which builds the model and is often a pipeline. An object to evaluate model performance. How will a model works on
testing data. 

evaluator = RegressionEvaluator(labelCol='consumption') 

Grid and cross-validator 
from pyspark.ml.tuning import CrossValidator, ParamGridBuilder 

The cross-validation object. 

cv = CrossValidator(estimator=regression,
                    estimatorParamMaps=params, 
                    evaluator=evaluator,
                    numFolds=10, seed=13) 
                    
You can optionally specify the number of folds (which defaults to three) and a random number seed for repeatability. 

Cross-validators need training too 
Apply cross-validation to the training data 
The cross-validator has a fit() method which will apply the cross-validation procedure to the training data.

cv = cv.fit(cars_train) 

You can then look at the average RMSE calculated across all of the folds. 

What the average RMSE across the folds? 
cv.avgMetrics 

You can then look at the average RMSE calculated across all of the folds. 
This is a more robust measure of model performance because it is based on multiple train/test splits. Note that the average 
metric is returned as a list.

Cross-Validators act like models 
Make predictions on the original testing data

evaluator.evaluate(cv.transform(cars_test))

----------------------------------------------------------------------------------------
Cross validating simple flight duration model
You've already built a few models for predicting flight duration and evaluated them with a simple train/test split. However, cross-validation provides a much better way to evaluate model performance.

In this exercise you're going to train a simple model for flight duration using cross-validation. Travel time is usually strongly correlated with distance, so using the km column alone should give a decent model.

The data have been randomly split into flights_train and flights_test.

The following classes have already been imported: LinearRegression, RegressionEvaluator, ParamGridBuilder and CrossValidator.

Create an empty parameter grid.
Create objects for building and evaluating a linear regression model. The model should predict the "duration" field.
Create a cross-validator object. Provide values for the estimator, estimatorParamMaps and evaluator arguments. Choose 5-fold cross validation.
Train and test the model across multiple folds of the training data.

# Create an empty parameter grid
params = ParamGridBuilder().build()

# Create objects for building and evaluating a regression model
regression = LinearRegression(labelCol='duration')
evaluator = RegressionEvaluator(labelCol='duration')

# Create a cross validator
cv = CrossValidator(estimator=regression, estimatorParamMaps=params, evaluator=evaluator, numFolds=5)

# Train and test model on multiple folds of the training data
cv = cv.fit(flights_train)

# NOTE: Since cross-validation builds multiple models, the fit() method can take a little while to complete.


Cross validating flight duration model pipeline
The cross-validated model that you just built was simple, using km alone to predict duration.

Another important predictor of flight duration is the origin airport. Flights generally take longer to get into the air 
from busy airports. Let's see if adding this predictor improves the model!

In this exercise you'll add the org field to the model. However, since org is categorical, there's more work to be done 
before it can be included: it must first be transformed to an index and then one-hot encoded before being assembled with km and used to build the regression model. We'll wrap these operations up in a pipeline.

The following objects have already been created:

params — an empty parameter grid
evaluator — a regression evaluator
regression — a LinearRegression object with labelCol='duration'.
All of the required classes have already been imported.


Create a string indexer. Specify the input and output fields as org and org_idx.
Create a one-hot encoder. Name the output field org_dummy.
Assemble the km and org_dummy fields into a single field called features.
Create a pipeline using the following operations: string indexer, one-hot encoder, assembler and linear regression. Use this to create a cross-validator.

# Create an indexer for the org field
indexer = StringIndexer(inputCol='org', outputCol='org_idx')

# Create an one-hot encoder for the indexed org field
onehot = OneHotEncoderEstimator(inputCols=['org_idx'], outputCols=['org_dummy'])

# Assemble the km and one-hot encoded fields
assembler = VectorAssembler(inputCols=['km', 'org_dummy'], outputCol='features')

# Create a pipeline and cross-validator.
pipeline = Pipeline(stages=[indexer, onehot, assembler, regression])
cv = CrossValidator(estimator=pipeline,
                    estimatorParamMaps=params,
                    evaluator=evaluator)
 ----------------------------------------------------------------------------------------------------------------
 
 Grid Search 

Parameter grid 

from pyspark.ml.tuning import ParamGridBuilder 
#Create a parameter frid builder 
params = ParamGridBuilder()
You can systematically evaluate a model across a grid of parameter values using a technique known as grid search.  

Optimizing flights linear regression
Up until now you've been using the default parameters when building your models. In this exercise you'll use 
cross validation to choose an optimal (or close to optimal) set of model parameters.

The following have already been created:

regression — a LinearRegression object
pipeline — a pipeline with string indexer, one-hot encoder, vector assembler and linear regression and
evaluator — a RegressionEvaluator object.


Create a parameter grid builder.
Add grids for with regression.regParam (values 0.01, 0.1, 1.0, and 10.0) and regression.elasticNetParam (values 0.0, 0.5, and 1.0).
Build the grid.
Create a cross validator, specifying five folds.


# Create parameter grid
params = ParamGridBuilder()

# Add grids for two parameters
params = params.addGrid(regression.regParam, [0.01, 0.1, 1.0, 10.0]) \
               .addGrid(regression.elasticNetParam, [0.0, 0.5, 1.0])

# Build the parameter grid
params = params.build()
print('Number of models to be tested: ', len(params))

# Create cross-validator
cv = CrossValidator(estimator=pipeline, estimatorParamMaps=params, evaluator=evaluator, numFolds=5)

Nice! Multiple models are built effortlessly using grid search.


Dissecting the best flight duration model
You just set up a CrossValidator to find good parameters for the linear regression model predicting flight duration.

Now you're going to take a closer look at the resulting model, split out the stages and use it to make predictions on the testing data.

The following have already been created:

cv — a trained CrossValidatorModel object and
evaluator — a RegressionEvaluator object.
The flights data have been randomly split into flights_train and flights_test.

Retrieve the best model.
Look at the stages in the best model.
Isolate the linear regression stage and extract its parameters.
Use the best model to generate predictions on the testing data and calculate the RMSE.



# Get the best model from cross validation
best_model = cv.bestModel

# Look at the stages in the best model
print(best_model.stages)

# Get the parameters for the LinearRegression object in the best model
best_model.stages[3].extractParamMap()

# Generate predictions on testing data using the best model then calculate RMSE
predictions = best_model.transform(flights_test)
evaluator.evaluate(predictions)

SMS spam optimised
The pipeline you built earlier for the SMS spam model used the default parameters for all of the elements in the pipeline. It's very unlikely that these parameters will give a particularly good model though.

In this exercise you'll set up a parameter grid which can be used with cross validation to choose a good set of parameters for the SMS spam classifier.

The following are already defined:

hasher — a HashingTF object and
logistic — a LogisticRegression object.

Create a parameter grid builder object.
Add grid points for numFeatures and binary parameters to the HashingTF object, giving values 1024, 4096 and 16384, and 
True and False, respectively.
Add grid points for regParam and elasticNetParam parameters to the LogisticRegression object, giving values of 0.01, 0.1, 
1.0 and 10.0, and 0.0, 0.5, and 1.0 respectively.
Build the parameter grid.

# Create parameter grid
params = ParamGridBuilder()

# Add grid for hashing trick parameters
params = params.addGrid(hasher.numFeatures, [1024, 4096, 16384]) \
               .addGrid(hasher.binary, [True, False])

# Add grid for logistic regression parameters
params = params.addGrid(logistic.regParam, [0.01, 0.1, 1.0, 10.0]) \
               .addGrid(logistic.elasticNetParam, [0.0, 0.5, 1.0])

# Build parameter grid
params = params.build()

Using cross-validation on a pipeline makes it possible to optimise each stage in the workflow.
Correct! There are 72 points in the parameter grid and 5 folds in the cross-validator. The product is 360. 
It takes time to build all of those models, which is why we're not doing it here!
-----------------------------------------------------------------------------------------------------------------------
Ensemble

An ensemble model is a collection of models. An ensemble model combines the results from multiple models to 
produce better predictions than any one of those models acting alone. The concept is based on the idea of the "Wisdom of the Crowd", 
which implies that the aggregated opinion of a group is better than the opinions of the individuals in that group, even if the 
individuals are experts.  


Diversity and independence are important because the best collective decisions are the product of disagreement and contest,
not consensus or compromise.  

Random Forest -- an ensemble of Decision Trees 
To ensure that each of those trees is different, the Decision Tree algorithm is modified slightly: 
Creating model diversity - Each tree trained on random subset data. Random subset of features used for splitting at each node.
No two trees in the forest should be the same.  All of the trees operate in parallel. 

Create a forest of trees: 

Returning to cars data: manufactured in USA (0.0) or not (0.1) 
Create Random Forest classifier:

from pyspark.ml.classification import RandomForestClassifier 
forest = RandomForestClassifier(numTrees=5) 

By default this is twenty, but we'll drop that to five so that the results are easier to interpret.  

Fit to the training data. 
forest = forest.fit(cares_train)

Once the model is trained it's possible to access the individual trees in the forest using the trees attribute. 


How to access trees within forest? 
forest.trees 

Thise can each be used to make individual predictions. There are precisely five trees in the forest, as specified. 

The trees are all different, as can be seen from the varying number of nodes in each tree.  You can then make predictions using each 
tree individually. 
Perdictions from individual trees.  What preditions are generated by each tree? 
Here are the predictions of individual trees on a subset of testing data.  Each row represent predictions from each of the five trees
for a specific record. In some cases all of the trees agree, but there is oftern some dissent amongst the models. This is precisely 
where the Random Forest works best: where the prediction is not clear cut. 

The Random Forest model creates a consensus prediction by aggregating the predictions across all of the individual trees. 
The transform method will automatically generate a consensus prediction column. It also creates a probability 
column which assigns aggregate probabilities to each of the outcomes. 


Feature importances 

forest.featureImportances 

It's possible to get an idea of the relative importance of the features in the model by looking at the featureImportances attribute. 
An importance is assigned to each feature, where a larger importance indicates a feature which makes a larger contribution to the 
model. 

Example: 

cyl: 0: 0.0205
size: 1: 0.2701 
mass: 2: 0.108 
length: 3: 0.1895
rpm: 4: 0.2939
consumption: 5: 0.11810

Looks like: 
* rpm is most important 
* cyl is least important 

Grandient - Boosted Trees 
Iterative boosting algorithm: 

1. Build a Decision Tree and add to ensemble 
2. Predict label for each training instance using ensemble 
3. Compare predictions with known labels
4. Emphasize training instances with incorrect predictions
5. Return to 1

Model improves on each iteration. 

Boosting trees 
Create a Gradient-Boosted Tree classifier 

from pyspark.ml.classification import GBTClassifier 
gbt = GBTClassifier(maxIter=10)

Fit to the training data

gbt = gbt.fit(cars_train) 


Comparing trees 
Let's compare the three types of three models on testing data.  
AUC obtained by each of them on the testing data. The higher the AUC score is better.  


Delayed flights with Gradient-Boosted Trees
You've previously built a classifier for flights likely to be delayed using a Decision Tree. 
In this exercise you'll compare a Decision Tree model to a Gradient-Boosted Trees model.
Import the classes required to create Decision Tree and Gradient-Boosted Tree classifiers.
Create Decision Tree and Gradient-Boosted Tree classifiers. Train on the training data.
Create an evaluator and calculate AUC on testing data for both classifiers. Which model performs better?
Find the number of trees and the relative importance of features in the Gradient-Boosted Tree classifier.

from pyspark.ml.classification import DecisionTreeClassifier, GBTClassifier
from pyspark.ml.evaluation import BinaryClassificationEvaluator

# Create model objects and train on training data
tree = DecisionTreeClassifier().fit(flights_train)
gbt = GBTClassifier().fit(flights_train)

# Compare AUC on testing data
evaluator = BinaryClassificationEvaluator()
evaluator.evaluate(tree.transform(flights_test))
evaluator.evaluate(gbt.transform(flights_test))

# Find the number of trees and the relative importance of features
print(gbt.getNumTrees)
print(gbt.featureImportances)




Delayed flights with a Random Forest
In this exercise you'll bring together cross validation and ensemble methods. You'll be training a Random 
Forest classifier to predict delayed flights, using cross validation to choose the best values for model parameters.

You'll find good values for the following parameters:

featureSubsetStrategy — the number of features to consider for splitting at each node and
maxDepth — the maximum number of splits along any branch.
Unfortunately building this model takes too long, so we won't be running the .fit() method on the pipeline.

Create a random forest classifier object.
Create a parameter grid builder object. Add grid points for the featureSubsetStrategy and maxDepth parameters.
Create binary classification evaluator.
Create a cross-validator object, specifying the estimator, parameter grid and evaluator. Choose 5-fold cross validation.



# Create a random forest classifier
forest = RandomForestClassifier()

# Create a parameter grid
params = ParamGridBuilder() \
            .addGrid(forest.featureSubsetStrategy, ['all', 'onethird', 'sqrt', 'log2']) \
            .addGrid(forest.maxDepth, [2, 5, 10]) \
            .build()

# Create a binary classification evaluator
evaluator = BinaryClassificationEvaluator()

# Create a cross-validator
cv = CrossValidator(estimator=forest, estimatorParamMaps=params, evaluator=evaluator, numFolds=5)



Evaluating Random Forest
In this final exercise you'll be evaluating the results of cross-validation on a Random Forest model.

The following have already been created:

cv - a cross-validator which has already been fit to the training data
evaluator — a BinaryClassificationEvaluator object and
flights_test — the testing data.


Retrieve a list of average AUC metrics across all models in the parameter grid.
What is the average AUC for the best model? This will be the largest AUC in the list.
Find the value of the maxDepth and featureSubsetStrategy parameters for the best model.
Calculate the AUC for the best model predictions on the testing data.


# Average AUC for each parameter combination in grid
avg_auc = cv.avgMetrics

# Average AUC for the best model
best_model_auc = max(cv.avgMetrics)

# What's the optimal parameter value?
opt_max_depth = cv.bestModel.explainParam('maxDepth')
opt_feat_substrat = cv.bestModel.explainParam('featureSubsetStrategy')

# AUC for best model on testing data
best_auc = evaluator.evaluate(cv.transform(flights_test))
Fantastic! Optimized Random Forest > Random Forest > Decision Tree




































 
                    









                    

























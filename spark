Creating a SparkSession
In this exercise, you'll spin up a local Spark cluster using all available cores. The cluster will be accessible via a 
SparkSession object.

The SparkSession class has a builder attribute, which is an instance of the Builder class. The Builder class 
exposes three important methods that let you:

specify the location of the master node;
name the application (optional); and
retrieve an existing SparkSession or, if there is none, create a new one.
The SparkSession class has a version attribute which gives the version of Spark.

Find out more about SparkSession here.

Once you are finished with the cluster, it's a good idea to shut it down, which will free up its resources, 
making them available for other processes.

Note:: You might find it useful to revise the slides from the lessons in the Slides panel next to the IPython Shell.


Import the SparkSession class from pyspark.sql.
Create a SparkSession object connected to a local cluster. Use all available cores. Name the application 'test'.
Retrieve the version of Spark running on the cluster.
Shut down the cluster.

# Import the PySpark module
from pyspark.sql import SparkSession 

# Create SparkSession object
spark = SparkSession.builder \
                    .master('local[*]') \
                    .appName('test') \
                    .getOrCreate()

# What version of Spark?
print(spark.version)

# Terminate the cluster
spark.stop()

----------------------------------------------------------------------------

Loading flights data
In this exercise you're going to load some airline flight data from a CSV file. To ensure that the exercise 
runs quickly these data have been trimmed down to only 50 000 records. You can get a larger dataset in the same format here.

Notes on CSV format:

fields are separated by a comma (this is the default separator) and
missing data are denoted by the string 'NA'.
Data dictionary:

mon — month (integer between 1 and 12)
dom — day of month (integer between 1 and 31)
dow — day of week (integer; 1 = Monday and 7 = Sunday)
org — origin airport (IATA code)
mile — distance (miles)
carrier — carrier (IATA code)
depart — departure time (decimal hour)
duration — expected duration (minutes)
delay — delay (minutes)
pyspark has been imported for you and the session has been initialized.

Note: The data have been aggressively down-sampled.

Read data from a CSV file called 'flights.csv'. Assign data types to columns automatically. Deal with missing data.
How many records are in the data?
Take a look at the first five records.
What data types have been assigned to the columns? Do these look correct?

# Read data from CSV file
flights = spark.read.csv('flights.csv',
                         sep=',',
                         header=True,
                         inferSchema=True,
                         nullValue= 'NA')

# Get number of records
print("The data contain %d records." % flights.count())

# View the first five records
flights.show(5)

# Check column data types
flights.dtypes
-----------------------------------------------------------------------------------------------------------
Loading SMS spam data
You've seen that it's possible to infer data types directly from the data. Sometimes it's convenient to have 
direct control over the column types. You do this by defining an explicit schema.

The file sms.csv contains a selection of SMS messages which have been classified as either 'spam' or 'ham'. 
These data have been adapted from the UCI Machine Learning Repository. There are a total of 5574 SMS, of which 
747 have been labelled as spam.

Notes on CSV format:

no header record and
fields are separated by a semicolon (this is not the default separator).
Data dictionary:

id — record identifier
text — content of SMS message
label — spam or ham (integer; 0 = ham and 1 = spam)

Specify the data schema, giving columns names ('id', 'text' and 'label') and column types.
Read data from a delimited file called 'sms.csv'.
Print the schema for the resulting DataFrame.


from pyspark.sql.types import StructType, StructField, IntegerType, StringType

# Specify column names and types
schema = StructType([
    StructField("id", IntegerType()),
    StructField("text", StringType()),
    StructField("label", IntegerType())
])

# Load data from a delimited file
sms = spark.read.csv("sms.csv", sep=';', header=False, schema=schema)

# Print schema of DataFrame
sms.printSchema()
---------------------------------------------------------------------------
Data Preparation

Removing columns and rows
You previously loaded airline flight data from a CSV file. You're going to develop a model which will 
predict whether or not a given flight will be delayed.

In this exercise you need to trim those data down by:

removing an uninformative column and
removing rows which do not have information about whether or not a flight was delayed.
Note:: You might find it useful to revise the slides from the lessons in the Slides panel next to the IPython Shell.

# Remove the 'flight' column
flights = flights.drop('flight')

# Number of records with missing 'delay' values
flights.filter('delay IS NULL').count()

# Remove records with missing 'delay' values
flights = flights.filter('delay IS NOT NULL')

# Remove records with missing values in any column and get the number of remaining rows
flights = flights.dropna()
print(flights.count())
------------------------------------------------------------------------------------
Column manipulation
The Federal Aviation Administration (FAA) considers a flight to be "delayed" when it arrives 15 minutes or 
more after its scheduled time.

The next step of preparing the flight data has two parts:

convert the units of distance, replacing the mile column with a kmcolumn; and
create a Boolean column indicating whether or not a flight was delayed.
Instructions
0 XP
Import a function which will allow you to round a number to a specific number of decimal places.
Derive a new km column from the mile column, rounding to zero decimal places. One mile is 1,60934 km.
Remove the mile column.
Create a label column with a value of 1 indicating the delay was 15 minutes or more and 0 otherwise.


# Import the required function
from pyspark.sql.functions import round

# Convert 'mile' to 'km' and drop 'mile' column
flights_km = flights.withColumn('km', round(flights.mile * 1.60934, 0)) \
                    .drop('mile')

# Create 'label' column indicating whether flight delayed (1) or not (0)
flights_km = flights_km.withColumn('label', (flights_km.delay >= 15).cast('integer'))

# Check first five records
flights_km.show(5)

-----------------------------------------------------------------------------------------
Categorical columns

In the flights data there are two columns, carrier and org, which hold categorical data. You need to 
transform those columns into indexed numerical values.

Instructions

Import the appropriate class and create an indexer object to transform the carrier column from a string to an numeric index.
Prepare the indexer object on the flight data.
Use the prepared indexer to create the numeric index column.
Repeat the process for the org column.


from pyspark.ml.feature import StringIndexer

# Create an indexer
indexer = StringIndexer(inputCol='carrier', outputCol='carrier_idx')

# Indexer identifies categories in the data
indexer_model = indexer.fit(flights)

# Indexer creates a new column with numeric index values
flights_indexed = indexer_model.transform(flights)

# Repeat the process for the other categorical feature
flights_indexed = StringIndexer(inputCol='org', outputCol='org_idx').fit(flights_indexed).transform(flights_indexed)

----------------------------------------------------------------------------------------------
Assembling columns
The final stage of data preparation is to consolidate all of the predictor columns into a single column.

At present our data has the following predictor columns:

mon, dom and dow
carrier_idx (derived from carrier)
org_idx (derived from org)
km
depart
duration

Import the class which will assemble the predictors.
Create an assembler object that will allow you to merge the predictors columns into a single column.
Use the assembler to generate a new consolidated column.

# Import the necessary class
from pyspark.ml.feature import VectorAssembler

# Create an assembler object
assembler = VectorAssembler(inputCols=[
    'mon', 'dom', 'dow', 'carrier_idx', 'org_idx', 'km', 'depart', 'duration'
], outputCol='features')

# Consolidate predictor columns
flights_assembled = assembler.transform(flights)

# Check the resulting column
flights_assembled.select('features', 'delay').show(5, truncate=False)

------------------------------------------------------------------------------------------------------------
Decision Tree

Train/test split
To objectively assess a Machine Learning model you need to be able to test it on an independent set of data. 
You can't use the same data that you used to train the model: of course the model will perform (relatively) well on those data!

You will split the data into two components:

training data (used to train the model) and
testing data (used to test the model).

Instructions

Randomly split the flights data into two sets with 80:20 proportions. For repeatability set a random 
number seed of 17 for the split.

Check that the testing data has roughly 80% of the records from the original data.

# Split into training and testing sets in a 80:20 ratio
flights_train, flights_test = flights.randomSplit([0.8, 0.2],seed = 17)

# Check that training set has around 80% of records
training_ratio = flights_train.count() / flights_test.count()
print(training_ratio)


Build a Decision Tree
Now that you've split the flights data into training and testing sets, you can use the training set to fit a Decision Tree model.

The data are available as flights_train and flights_test.

NOTE: It will take a few seconds for the model to train... please be patient!
Import the class for creating a Decision Tree classifier.
Create a classifier object and fit it to the training data.
Make predictions for the testing data and take a look at the predictions.

# Import the Decision Tree Classifier class
from pyspark.ml.classification import DecisionTreeClassifier 

# Create a classifier object and fit to the training data
tree = DecisionTreeClassifier()
tree_model = tree.fit(flights_train)

# Create predictions for the testing data and take a look at the predictions
prediction = tree_model.transform(flights_test)
prediction.select('label', 'prediction', 'probability').show(5, False)


---------------------------------------------------------------------------------------

Evaluate the Decision Tree
You can assess the quality of your model by evaluating how well it performs on the testing data. 
Because the model was not trained on these data, this represents an objective assessment of the model.

A confusion matrix gives a useful breakdown of predictions versus known values. It has four cells which represent the counts of:

True Negatives (TN) — model predicts negative outcome & known outcome is negative
True Positives (TP) — model predicts positive outcome & known outcome is positive
False Negatives (FN) — model predicts negative outcome but known outcome is positive
False Positives (FP) — model predicts positive outcome but known outcome is negative.

Instructions

Create a confusion matrix by counting the combinations of label and prediction. Display the result.
Count the number of True Negatives, True Positives, False Negatives and False Positives.
Calculate the accuracy.

# Create a confusion matrix
prediction.groupBy("label", 'prediction').count().show()

# Calculate the elements of the confusion matrix
TN = prediction.filter('prediction = 0 AND label = prediction').count()
TP = prediction.filter('prediction = 1 AND label = prediction').count()
FN = prediction.filter('prediction = 0 AND label != prediction').count()
FP = prediction.filter('prediction = 1 AND label != prediction').count()

# Accuracy measures the proportion of correct predictions
accuracy = (TP/TN)
print(accuracy)

-----------------------------------------------------------------------------------------------
Build a Logistic Regression model

You've already built a Decision Tree model using the flights data. Now you're going to create a 
Logistic Regression model on the same data.


The objective is to predict whether a flight is likely to be delayed by at least 15 minutes (label 1) or not (label 0).

Although you have a variety of predictors at your disposal, you'll only use the mon, depart and 
duration columns for the moment. These are numerical features which can immediately be used for a Logistic Regression model. 
You'll need to do a little more work before you can include categorical features. Stay tuned!

The data have been split into training and testing sets and are available as flights_train and flights_test.

Import the class for creating a Logistic Regression classifier.
Create a classifier object and train it on the training data.
Make predictions for the testing data and create a confusion matrix.


# Import the logistic regression class
from pyspark.ml.classification import LogisticRegression

# Create a classifier object and train on training data
logistic = LogisticRegression().fit(flights_train)

# Create predictions for the testing data and show confusion matrix
prediction = logistic.transform(flights_test)
prediction.groupBy('label','prediction').count().show()

------------------------------------------------------------------------------------------------------------
Evaluate the Logistic Regression model
Accuracy is generally not a very reliable metric because it can be biased by the most common target class.

There are two other useful metrics:

precision and
recall.
Check the slides for this lesson to get the relevant expressions.

Precision is the proportion of positive predictions which are correct. For all flights which are predicted to 
be delayed, what proportion is actually delayed?

Recall is the proportion of positives outcomes which are correctly predicted. For all delayed flights, what 
proportion is correctly predicted by the model?

The precision and recall are generally formulated in terms of the positive target class. But it's also 
possible to calculate weighted versions of these metrics which look at both target classes.

The components of the confusion matrix are available as TN, TP, FN and FP, as well as the object prediction.


Find the precision and recall.
Create a multi-class evaluator and evaluate weighted precision.
Create a binary evaluator and evaluate AUC.

from pyspark.ml.evaluation import MulticlassClassificationEvaluator, BinaryClassificationEvaluator

# Calculate precision and recall
precision = TP / (TP + FP)
recall = TP / (TP + FN)
print('precision = {:.2f}\nrecall    = {:.2f}'.format(precision, recall))

# Find weighted precision
multi_evaluator = MulticlassClassificationEvaluator()
weighted_precision = multi_evaluator.evaluate(prediction, {multi_evaluator.metricName: "weightedPrecision"})

# Find AUC
binary_evaluator = BinaryClassificationEvaluator()
auc = binary_evaluator.evaluate(prediction, {binary_evaluator.metricName: "areaUnderROC"})

---------------------------------------------------------------------------------------------------------

Turning Text into Tables

Term-document matrix 

A selection of Children's books 

books.show(truncate=False) 
--------------------------------------------------------------------------------------------------

from pyspark.sql.functions import regexp_replace 
#Regular expression (REGEX) to match commas and hyphens 

REGEX = '[,\\-]'

books = books.withColumn('text', regexp_replace(books.text, REGEX,' '))

-----------------------------------------------------------------------------------------------------

Text to Tokens 

from pyspark.ml.feature import Tokenizer 
books = Tokenizer(inputCol="text", outputCol="tokens").transform(books)
--------------------------------------------------------------------------------------------------------
#Stop Words 

from pyspark.ml.feature import StopWordsRemover 

stopwords = StopWordsRemover()

#Take a look at the list of stop words 

stopwords.getStopWords()

------------------------------------------------------------------------------------------------------------

Feature Hashing 
Hashing trick, which in simple terms converts words into numbers. 

from pyspark.ml.feature import HashingTF 
hasher = HashingTF(inputCol="words", outputCol="hash', numFeatures=32)
books = hasher.transform(books)

The first list contains the hashed values and the second list indicates how many times each of those values occurs.  
For example, in the first 
document the word "long" has a hash of 8 and occurs twice. Similarly, the word "five" has a hash of 6 and occurs once 
in each of the last two
documents. 


from pyspark.ml.feature import IDF 
books = IDF(inputCol="hash", outputCol="features").fit(books).transform(books)

The final step is to accountfor some words occurring frequently across many documents. If a word appears in many documents then 
it's probably going to be less useful for building a classifier. We want to weight to the number of counts for a word in a particular
document against how frequently that word occurs across all documents. To do this you reduce the effective count for more common 
words, giving what is known as the "inverse document frequency". 

Inverse document frequency is generated by the IDF class, which is first fit to the hashed data and then used to 
generate weighted counts. 

The word "five", for example, occurs in multiple documents, so its effective frequency is reduced. 

The inverse document frequencies are precisely what we need for building a Machine Learning model. 




Punctuation, numbers and tokens
At the end of the previous chapter you loaded a dataset of SMS messages which had been 
labeled as either "spam" (label 1) or "ham" (label 0). You're now going to use those data to build a classifier model.

But first you'll need to prepare the SMS messages as follows:

remove punctuation and numbers
tokenize (split into individual words)
remove stop words
apply the hashing trick
convert to TF-IDF representation.
In this exercise you'll remove punctuation and numbers, then tokenize the messages.

The SMS data are available as sms.


Import the function to replace regular expressions and the feature to tokenize.
Replace all punctuation characters from the text column with a space. Do the same for all numbers in the text column.
Split the text column into tokens. Name the output column words.

# Import the necessary functions
from pyspark.sql.functions import regexp_replace
from pyspark.ml.feature import Tokenizer

# Remove punctuation (REGEX provided) and numbers
wrangled = sms.withColumn('text', regexp_replace(sms.text, '[_():;,.!?\\-]', ' '))
wrangled = wrangled.withColumn('text', regexp_replace(wrangled.text, '[0-9]', ' '))

# Merge multiple spaces
wrangled = wrangled.withColumn('text', regexp_replace(wrangled.text, ' +', ' '))

# Split the text into words
wrangled = Tokenizer(inputCol='text', outputCol='words').transform(wrangled)

wrangled.show(4, truncate=False)

---------------------------------------------------------------------------------

Stop words and hashing
The next steps will be to remove stop words and then apply the hashing trick, converting the results into a TF-IDF.

A quick reminder about these concepts:

The hashing trick provides a fast and space-efficient way to map a very large (possibly infinite) set of items (in this case, 
all words contained in the SMS messages) onto a smaller, finite number of values.
The TF-IDF matrix reflects how important a word is to each document. It takes into account both the frequency of the word 
within each document but also the frequency of the word across all of the documents in the collection.
The tokenized SMS data are stored in sms in a column named words. You've cleaned up the handling of spaces in the data 
so that the tokenized text is neater.


Import the StopWordsRemover, HashingTF and IDF classes.
Create a StopWordsRemover object (input column words, output column terms). Apply to sms.
Create a HashingTF object (input results from previous step, output column hash). Apply to wrangled.
Create an IDF object (input results from previous step, output column features). Apply to wrangled.

from pyspark.ml.feature import StopWordsRemover, HashingTF, IDF

# Remove stop words.
wrangled = StopWordsRemover(inputCol='words', outputCol='terms')\
      .transform(sms)

# Apply the hashing trick
wrangled = HashingTF(inputCol='terms', outputCol='hash', numFeatures=1024)\
      .transform(wrangled)

# Convert hashed symbols to TF-IDF
tf_idf = IDF(inputCol='hash', outputCol='features')\
      .fit(wrangled).transform(wrangled)
      
tf_idf.select('terms', 'features').show(4, truncate=False)

HINT:
These classes are found in pyspark.ml.feature.
Call the transform() method to create a StopWordsRemover object.
Call the transform() method to create a HashingTF object. The output column from StopWordsRemover becomes the input column for HashingTF.
Call the fit() and transform() methods to create an IDF object. The output column from  HashingTF becomes the input column for IDF.
-------------------------------------------------------------------------------------------
Training a spam classifier
The SMS data have now been prepared for building a classifier. Specifically, this is what you have done:

removed numbers and punctuation
split the messages into words (or "tokens")
removed stop words
applied the hashing trick and
converted to a TF-IDF representation.
Next you'll need to split the TF-IDF data into training and testing sets. Then you'll use the training 
data to fit a Logistic Regression model and finally evaluate the performance of that model on the testing data.

The data are stored in sms and LogisticRegression has been imported for you.

Split the data into training and testing sets in a 4:1 ratio. Set the random number seed to 13 to ensure repeatability.
Create a LogisticRegression object and fit it to the training data.
Generate predictions on the testing data.
Use the predictions to form a confusion matrix.

# Split the data into training and testing sets
sms_train, sms_test = sms.randomSplit([0.8, 0.2], seed=13)

# Fit a Logistic Regression model to the training data
logistic = LogisticRegression(regParam=0.2).fit(sms_train)

# Make predictions on the testing data
prediction = logistic.transform(sms_test)

# Create a confusion matrix, comparing predictions to known labels
prediction.groupBy('label', 'prediction').count().show()

------------------------------------------------------------------------------------
Hint
Use the randomSplit() method. The weights should be [0.8, 0.2]. Specify the seed argument.
The LogisticRegression() class is defined in pyspark.ml.classification. Call the fit() method.
Call the transform() method.
Group the data by label and prediction then count() and show() the results.


--------------------------------------------------------------------------------------

One-Hot Encoding

The first step is to create a column for each of the levels. Effectively you then place a check in the column corresponding 
to the value in each row. Each categorical level becomes a column. Binary values indicate the presence (1) or absence (0) 
of the corresponding level. Sparse representation: store column index and value. The process of creating dummy 
variables is called 'One-Hot'.

from pyspark.ml.feature import OneHotEncoderEstimator 
onehot = OneHotEncoderEstimator(inputCols=['type_idx'], outputCols=['type_dummy']

#When instantiating the class you need to specify the names of the input and output columns.  

#Fit the encoder to the data

Onehot = onehot.fit(cars)

#How many category levels? 
onehot.categorySizes 

cars = onehot.transform(cars)
cars.select('type','type_idx', 'type_dummy').distinct().sort('type_idx').show()

#Now that the encoder is setup it can be applied to the data by calling the transform() method. 

#Dense versus sparse 

from pyspark.mllib.linalg import DenseVector, SparseVector 

#Suppose that you want to stor a vector which consists mostly of zeros.  
#You could store it as a dense vector, in which each of the elements of the vector is stored explicitly. 

#A sparse representation is a much better alternative. 

One hot encoding is a common technique used to work with categorical features. There are multiple tools available 
to facilitate this pre-processing step in Python, but it usually becomes much harder when you need your code to work 
on new data that might have missing or additional values.

That's the case if you want to deploy a model to production for instance, sometimes you don't know what new values 
will appear in the data you receive.

In this tutorial we will present two ways of dealing with this problem. Everytime, we will first run one hot encoding on 
our training set and save a few attributes that we can reuse later on, when we need to process new data.

If you deploy a model to production, the best way of saving those values is writing your own class and define them 
as attributes that will be set at training, as an internal state.

What is Categorical Data?
Categorical data are variables that contain label values rather than numeric values.

The number of possible values is often limited to a fixed set.

Categorical variables are often called nominal.

Some examples include:

A “pet” variable with the values: “dog” and “cat“.
A “color” variable with the values: “red“, “green” and “blue“.
A “place” variable with the values: “first”, “second” and “third“.
Each value represents a different category.

Some categories may have a natural relationship to each other, such as a natural ordering.

The “place” variable above does have a natural ordering of values. This type of categorical variable is called an ordinal variable.

What is the Problem with Categorical Data?
Some algorithms can work with categorical data directly.

For example, a decision tree can be learned directly from categorical data with no data transform 
required (this depends on the specific implementation).

Many machine learning algorithms cannot operate on label data directly. They require all input variables 
and output variables to be numeric.

In general, this is mostly a constraint of the efficient implementation of machine learning algorithms 
rather than hard limitations on the algorithms themselves.

This means that categorical data must be converted to a numerical form. If the categorical variable is an 
output variable, you may also want to convert predictions by the model back into a categorical form in order 
to present them or use them in some application.
----------------------------------------------------------------------------------------

Encoding flight origin
The org column in the flights data is a categorical variable giving the airport from which a flight departs.

ORD — O'Hare International Airport (Chicago)
SFO — San Francisco International Airport
JFK — John F Kennedy International Airport (New York)
LGA — La Guardia Airport (New York)
SMF — Sacramento
SJC — San Jose
TUS — Tucson International Airport
OGG — Kahului (Hawaii)
Obviously this is only a small subset of airports. Nevertheless, since this is a categorical variable, it needs to be 
one-hot encoded before it can be used in a regression model.

The data are in a variable called flights. You have already used a string indexer to create a column of indexed 
values corresponding to the strings in org.

Note:: You might find it useful to revise the slides from the lessons in the Slides panel next to the IPython Shell.
Import the one-hot encoder class.
Create an one-hot encoder instance, naming the output column 'org_dummy'.
Apply the one-hot encoder to the flights data.
Generate a summary of the mapping from categorical values to binary encoded dummy variables. 
Include only unique values and order by org_idx.

# Import the one hot encoder class
from pyspark.ml.feature import OneHotEncoderEstimator

# Create an instance of the one hot encoder
onehot = OneHotEncoderEstimator(inputCols=['org_idx'], outputCols=['org_dummy'])

# Apply the one hot encoder to the flights data
onehot = onehot.fit(flights)
flights_onehot = onehot.transform(flights)

# Check the results
flights_onehot.select('org', 'org_idx', 'org_dummy').distinct().sort('org_idx').show()


Encoding shirt sizes
You have data for a consignment of t-shirts. The data includes the size of the shirt, which is given as either S, M, L or XL.

Here are the counts for the different sizes:

+----+-----+
|size|count|
+----+-----+
|   S|    8|
|   M|   15|
|   L|   20|
|  XL|    7|
+----+-----+
The sizes are first converted to an index using StringIndexer and then one-hot encoded using OneHotEncoderEstimator.

Which of the following is not true:

Answer the question
50 XP
Possible Answers
S shirts get index 2.0 and are one-hot encoded as (3,[2],[1.0])
press
1
M shirts get index 1.0 and are one-hot encoded as (3,[1],[1.0])
press
2
L shirts get index 0.0 and are one-hot encoded as (3,[0],[1.0])
press
3
XL shirts get index 3.0 and are one-hot encoded as (3,[3],[1.0])
press

This statement is true: M is the second most frequent size. It receives and index of 1 and is one-hot encoded to column 1.
This statement is true: L is the most frequent size. It receives and index of 0 and is one-hot encoded to column 0.

Correct! This statement is false: XL is the least frequent size, so it receives an index of 3. However, it is one-hot 
encoded to (3,[],[]) because it does not get it's own dummy variable. If none of the other dummy variables are true, 
then this one must be true. So to make a separate dummy variable would be redundant!
--------------------------------------------------------------------------------------------------------------------


























